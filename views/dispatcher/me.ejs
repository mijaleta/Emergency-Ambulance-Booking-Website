<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
  <h1>nxjasjknd</h1>
<!-- Include Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.6.8/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.8/firebase-messaging-compat.js"></script>

<script>
  // Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyAsa3Qp2X-JddKBjicW6dLH6pVv6yiUV24",
    authDomain: "ambulancebooking-812cd.firebaseapp.com",
    projectId: "ambulancebooking-812cd",
    storageBucket: "ambulancebooking-812cd.appspot.com",
    messagingSenderId: "887269267926",
    appId: "1:887269267926:web:fff487690a9b8364e02c77",
    measurementId: "G-H5CN5R5BLD"
  };

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const messaging = firebase.messaging();

  // Function to request permission and retrieve token
  const requestPermissionAndToken = async () => {
    try {
      const permission = await Notification.requestPermission();
      console.log('Permission:', permission);
      if (permission === 'granted') {
        const token = await messaging.getToken();
        console.log('Token:', token);
        // Send the token to your backend for notification delivery
        sendTokenToServer(token);
      } else {
        console.log('Permission denied');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Request permission and retrieve token when the page loads
  window.addEventListener('load', () => {
    requestPermissionAndToken();
  });

  // Function to send the token to the backend
  function sendTokenToServer(token) {
    // Make a POST request to your backend with the token
    fetch('/registerToken', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ token: token }) // Include the token in the request body
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to send token to server');
      }
      console.log('Token sent to server successfully');
    })
    .catch(error => {
      console.error('Error sending token to server:', error);
    });
  }

  // Handle incoming messages
  messaging.onMessage((payload) => {
    console.log('Message received:', payload);
    // Display the notification content in the dashboard
    displayNotification(payload);
  });

  // Function to display notification
  function displayNotification(payload) {
    // Display the notification in your dashboard UI
    // You can customize this based on your UI requirements
    // For example:
    alert(`Title: ${payload.notification.title}\nBody: ${payload.notification.body}`);
  }

  // Handle token refresh manually by periodically checking for a new token
  setInterval(async () => {
    try {
      const token = await messaging.getToken();
      console.log('Refreshed Token:', token);
      // Send the refreshed token to your backend for notification delivery
      sendTokenToServer(token);
    } catch (error) {
      console.error('Error refreshing token:', error);
    }
  }, 60 * 60 * 1000); // Check for token refresh every hour
</script>

<!-- Include your other scripts -->
<script src="../js/main.js"></script>
</body>
</html>
